name: 'Terraform'

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'infrastructure/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: deploy
    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |

            const output = `*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false

  kubeflow-deploy:
    name: 'Deploy Kubeflow Pipelines'
    runs-on: ubuntu-latest
    needs: terraform
    # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name kubeflow-eks --region ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        run: terraform init

      - name: Deploy Kubeflow Components
        run: |
          echo "Deploying Kubeflow components..."
          terraform apply -target=null_resource.kubeflow_kustomize -auto-approve -input=false

      - name: Wait for Kubeflow Pods
        run: |
          echo "Waiting for Kubeflow pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=ml-pipeline-api-server -n kubeflow --timeout=600s || true
          kubectl wait --for=condition=ready pod -l app=ml-pipeline-ui -n kubeflow --timeout=600s || true

          # Give additional time for all components to stabilize
          sleep 60

      - name: Verify Kubeflow Deployment
        run: |
          echo "Verifying Kubeflow deployment..."
          kubectl get pods -n kubeflow
          kubectl get svc -n kubeflow

          # Get the ingress URL
          KUBEFLOW_URL=$(kubectl get ingress -n kubeflow kubeflow-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "Ingress not ready yet")
          echo "Kubeflow Pipelines UI will be available at: http://$KUBEFLOW_URL"
